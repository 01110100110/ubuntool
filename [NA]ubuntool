#!/bin/bash
#This is ubuntool, it is a script that will be able to run my other scripts,
#it is not going to be perfect in terms of commenting, but if my other scripts have comments in them i will not remove them.

exitscript(){
	clear
	exit 0
}
UserName=$(whoami)
pause(){
	read -p "Press [Enter] key to continue..."
}
update(){
		echo "Updating..."
		sudo add-apt-repository -y ppa:libreoffice/ppa
		wait
		sudo apt-get update -y
		wait
		sudo apt-get upgrade -y
		wait
		sudo apt-get dist-upgrade -y
		wait
		killall firefox
		wait
		sudo apt-get --purge --reinstall install firefox -y
		wait
		sudo apt-get install clamtk -y	
		wait

		##Set daily updates
		sed -i -e 's/APT::Periodic::Update-Package-Lists.*\+/APT::Periodic::Update-Package-Lists "1";/' /etc/apt/apt.conf.d/10periodic
		sed -i -e 's/APT::Periodic::Download-Upgradeable-Packages.*\+/APT::Periodic::Download-Upgradeable-Packages "0";/' /etc/apt/apt.conf.d/10periodic
	##Set "install security updates"
			cat /etc/apt/sources.list | grep "deb http://security.ubuntu.com/ubuntu/ trusty-security universe main multiverse restricted"
			if [ $? -eq 1 ]
			then
			echo "deb http://security.ubuntu.com/ubuntu/ trusty-security universe main multiverse restricted" >> /etc/apt/sources.list
			fi

			echo "###Automatic updates###"
			cat /etc/apt/apt.conf.d/10periodic
			echo ""
			echo "###Important Security Updates###"
			cat /etc/apt/sources.list
			pause
			menu
}
usrConfig(){
# Prompt the user for a list of admin users
echo "Enter a space-separated list of admin users:"
read -a admin_users

# Prompt the user for a list of standard users
echo "Enter a space-separated list of standard users:"
read -a standard_users

# Get a list of all users on the system
all_users=$(cat /etc/passwd | cut -d ":" -f 1)

# Store the list of users that will be modified in an array
users_to_modify=()
echo "The following users will be modified:"
# Loop through the list of all users
for user in $all_users; do
  # Get the UID of the current user
  uid=$(id -u "$user")

  # Check if the UID is between 0 and 999(to skip things like root or daemons)
  if [ $uid -ge 0 ] && [ $uid -le 999 ]; then
    # Skip this user
    continue
  fi
  # Check if the current user is in the list of admin users or standard users
  if [[ " ${admin_users[@]} " =~ " ${user} " ]] || [[ " ${standard_users[@]} " =~ " ${user} " ]]; then
    # Add the user to the list of users to modify
    users_to_modify+=($user)
    echo "-$user"
  fi
done

# Prompt the user for confirmation
read -p "Are you sure you want to continue? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  # The user did not confirm, so exit the script
  exit 1
fi

# Loop through the list of users to modify
for user in "${users_to_modify[@]}"; do
  # Check if the current user is in the list of admin users
  if [[ " ${admin_users[@]} " =~ " ${user} " ]]; then
    # Add the user to the sudo group and remove them from the admin group
    usermod -aG sudo "$user"
    usermod -aG adm "$user"
  fi
  
  # Check if the user is in the list of standard users
  if [[ " ${standard_users[@]} " =~ " ${user} " ]]; then
    # Remove the user from the sudo and admin groups
    gpasswd -d "$user" sudo
    gpasswd -d "$user" adm
  fi
done
# Store the list of users that will be deleted in an array
users_to_delete=()

# Loop through the list of all users
for user in $all_users; do
  # Skip the user "nobody"
  if [ "$user" == "nobody" ]; then
    continue
  fi

  # Get the UID of the current user
  uid=$(id -u "$user")

  # Check if the UID is between 0 and 999
  if [ $uid -ge 0 ] && [ $uid -le 999 ]; then
    # Skip this user
    continue
  fi

  # Check if the current user is not in the list of admin users or standard users
  if [[ ! " ${admin_users[@]} " =~ " ${user} " ]] && [[ ! " ${standard_users[@]} " =~ " ${user} " ]]; then
    # Add the user to the list of users to delete
    users_to_delete+=($user)
  fi
done

# Echo the list of users that will be deleted
echo "The following users will be deleted:"
for user in "${users_to_delete[@]}"; do
  echo "- $user"
done

# Prompt the user for confirmation
read -p "Are you sure you want to continue? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  # The user did not confirm, so exit the script
  exit 1
fi

# Loop through the list of users to delete
for user in "${users_to_delete[@]}"; do
  # Delete the user
  userdel -r "$user"
done
}
test(){
	echo test complete
	pause
	menu
}
menu(){
echo "███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████"
echo "█░░░░░░██░░░░░░█░░░░░░░░░░░░░░███░░░░░░██░░░░░░█░░░░░░██████████░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░█████████"
echo "█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█████████"
echo "█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░▄▀░░███░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░██░░▄▀░░█░░░░░░▄▀░░░░░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░█████████"
echo "█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░███░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████"
echo "█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░▄▀░░░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████"
echo "█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████"
echo "█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████"
echo "█░░▄▀░░██░░▄▀░░█░░▄▀░░████░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░░░░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████"
echo "█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░██░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀░░█████░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█"
echo "█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░░░░░░░░░▄▀░░█████░░▄▀░░█████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█"
echo "█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░██████████░░░░░░█████░░░░░░█████░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█"
echo "███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████"
				echo ""
				echo "Ubuntu cyberpatriot tool, Written by corbin parrish"
				echo ""
				echo "█▀█ █▀█ ▀█▀ █ █▀█ █▄░█ █▀"
				echo "█▄█ █▀▀ ░█░ █ █▄█ █░▀█ ▄█"
				echo ""
				echo "1: Run a Test				2: Administrate users	        "
				echo "3: Update and configure update settings	4: Exit, requires a ctrl-c	"
}





read_options(){
	read -p "> " choice
        	case  $choice in
                	1) test;;
			2) usrConfig;;
			3) update;;
			4) exitscript;;
        	esac

}



while true
do
	clear
	menu
	read_options
done
